{
  "version": 3,
  "sources": ["../../nepali-date-converter/src/nepali-date-helper.ts", "../../nepali-date-converter/src/nepali-date-converter.ts"],
  "sourcesContent": ["export enum Language {\n  np = 'np',\n  en = 'en'\n}\nexport interface IYearMonthDate {\n  year: number\n  month: number\n  date: number\n  day?: number\n}\n\nexport interface IAdBs {\n  AD: IYearMonthDate\n  BS: IYearMonthDate\n}\n\n/**\n * The constant storing nepali date month days mappings for each year starting from 2000 BS\n */\nconst yearMonthDaysMapping: number[][] = [\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], // 2081 BS\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n  [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]\n]\n\n/**\n * Memoizing the days passed for each month in year for faster calculation\n */\nconst monthDaysMappings: number[][][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  let daySum = 0\n  return yearMappings.map((monthDays: number) => {\n    const monthPassedDays = [monthDays, daySum]\n    daySum += monthDays\n    return monthPassedDays\n  })\n}, [])\n\n/**\n * Ignore\n */\nlet daysPassed = 0\n/**\n * Memoizing the days passed after each year from the epoch time and the sum of days in a year\n */\nconst yearDaysMapping: number[][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  const daysInYear = yearMappings.reduce((acc, x) => acc + x, 0)\n  const yearDaysPassed = [daysInYear, daysPassed]\n  daysPassed += daysInYear\n  return yearDaysPassed\n})\n\n/**\n * Max possible Day\n */\nconst MAX_DAY = 33238\n\nif (daysPassed !== MAX_DAY) {\n  throw new Error('Invalid constant initialization for Nepali Date.')\n}\n\n/**\n * Min possible Day\n */\nconst MIN_DAY = 1\n/**\n * @ignore\n */\nexport function getYearIndex(year: number) {\n  return year - EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport function getYearFromIndex(yearIndex: number) {\n  return yearIndex + EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport const KTM_TIMEZONE_OFFSET = 20700000\n/**\n * @ignore\n */\nexport const EPOCH_YEAR = 2000\n/**\n * @ignore\n */\nexport const COMPLETED_DAYS = 1\n/**\n * @ignore\n */\nexport const TOTAL_DAYS = 0\n\n/**\n * @ignore\n */\nfunction mod(m: number, val: number) {\n  while (val < 0) {\n    val += m\n  }\n  return val % m\n}\n/**\n * Format Object\n */\nexport const formatObj = {\n  en: {\n    day: {\n      short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    month: {\n      short: ['Bai', 'Jes', 'Asa', 'Shr', 'Bhd', 'Asw', 'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'],\n      long: [\n        'Baisakh',\n        'Jestha',\n        'Asar',\n        'Shrawan',\n        'Bhadra',\n        'Aswin',\n        'Kartik',\n        'Mangsir',\n        'Poush',\n        'Magh',\n        'Falgun',\n        'Chaitra'\n      ]\n    },\n    date: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  },\n  np: {\n    day: {\n      short: ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'],\n      long: ['आइतबार', 'सोमबार', 'मंगलबार', 'बुधबार', 'बिहिबार', 'शुक्रबार', 'शनिबार']\n    },\n    month: {\n      short: ['बै', 'जे', 'अ', 'श्रा', 'भा', 'आ', 'का', 'मं', 'पौ', 'मा', 'फा', 'चै'],\n      long: [\n        'बैशाख',\n        'जेठ',\n        'असार',\n        'श्रावण',\n        'भाद्र',\n        'आश्विन',\n        'कार्तिक',\n        'मंसिर',\n        'पौष',\n        'माघ',\n        'फाल्गुण',\n        'चैत्र'\n      ]\n    },\n    date: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९']\n  }\n}\n\n/**\n * Epoch in english date\n */\nconst beginEnglish = {\n  year: 1943,\n  month: 3,\n  date: 13,\n  day: 3\n}\n\n/**\n * `findPassedDays` calculates the days passed from the epoch time.\n *  If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param year Year between 2000-2009 of nepali date\n * @param month Month Index which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @param date Date which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @returns Number of days passed since epoch time from the given date,month and year.\n */\nexport function findPassedDays(year: number, month: number, date: number) {\n  try {\n    const yearIndex = getYearIndex(year)\n    const pastYearDays = yearDaysMapping[yearIndex][COMPLETED_DAYS]\n    const extraMonth = mod(12, month)\n    const extraYear = Math.floor(month / 12)\n\n    const pastMonthDays =\n      yearDaysMapping[yearIndex + extraYear][COMPLETED_DAYS] -\n      pastYearDays +\n      monthDaysMappings[yearIndex + extraYear][extraMonth][COMPLETED_DAYS]\n\n    const daysPassed = pastYearDays + pastMonthDays + date\n    if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n      throw new Error()\n    }\n    return daysPassed\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport { monthDaysMappings, yearDaysMapping }\n\n/**\n * `mapDaysToDate` finds the date where the the given day lies from the epoch date\n * If the daysPassed is on the date 2000/01/01 then it will be 1. Similarly, every day adds on from then\n * If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param daysPassed The number of days passed since nepali date epoch time\n * @returns date values in object implementing IYearMonthDate interface\n */\nexport function mapDaysToDate(daysPassed: number): IYearMonthDate {\n  if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n    throw new Error(`The epoch difference is not within the boundaries ${MIN_DAY} - ${MAX_DAY}`)\n  }\n\n  const yearIndex = yearDaysMapping.findIndex(\n    year =>\n      daysPassed > year[COMPLETED_DAYS] && daysPassed <= year[COMPLETED_DAYS] + year[TOTAL_DAYS]\n  )\n  const monthRemainder = daysPassed - yearDaysMapping[yearIndex][COMPLETED_DAYS]\n  const monthIndex = monthDaysMappings[yearIndex].findIndex(\n    month =>\n      monthRemainder > month[COMPLETED_DAYS] &&\n      monthRemainder <= month[COMPLETED_DAYS] + month[TOTAL_DAYS]\n  )\n  const date = monthRemainder - monthDaysMappings[yearIndex][monthIndex][COMPLETED_DAYS]\n\n  return {\n    year: getYearFromIndex(yearIndex),\n    month: monthIndex,\n    date: date\n  }\n}\n\nexport function findPassedDaysAD(year: number, month: number, date: number) {\n  const timeDiff = Math.abs(\n    Date.UTC(year, month, date) - Date.UTC(beginEnglish.year, beginEnglish.month, beginEnglish.date)\n  )\n  const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24))\n  return diffDays\n}\n\nexport function mapDaysToDateAD(daysPassed: number) {\n  const mappedDate = new Date(Date.UTC(1943, 3, 13 + daysPassed))\n  return {\n    year: mappedDate.getUTCFullYear(),\n    month: mappedDate.getUTCMonth(),\n    date: mappedDate.getUTCDate(),\n    day: mappedDate.getUTCDay()\n  }\n}\n\nexport function convertToAD(bsDateObject: IYearMonthDate): IAdBs {\n  try {\n    const daysPassed = findPassedDays(bsDateObject.year, bsDateObject.month, bsDateObject.date)\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport function convertToBS(adDateObject: Date): IAdBs {\n  try {\n    const daysPassed = findPassedDaysAD(\n      adDateObject.getFullYear(),\n      adDateObject.getMonth(),\n      adDateObject.getDate()\n    )\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nfunction mapLanguageNumber(dateNumber: string, language: 'en' | 'np'): string {\n  return dateNumber\n    .split('')\n    .map(num => formatObj[language].date[parseInt(num, 10)])\n    .join('')\n}\n\nexport function format(\n  bsDate: IYearMonthDate,\n  stringFormat: string,\n  language: 'en' | 'np'\n): string {\n  return stringFormat\n    .replace(/((\\\\[MDYd])|D{1,2}|M{1,4}|Y{2,4}|d{1,3})/g, (match, _, matchedString) => {\n      switch (match) {\n        case 'D':\n          return mapLanguageNumber(bsDate.date.toString(), language)\n        case 'DD':\n          return mapLanguageNumber(bsDate.date.toString().padStart(2, '0'), language)\n        case 'M':\n          return mapLanguageNumber((bsDate.month + 1).toString(), language)\n        case 'MM':\n          return mapLanguageNumber((bsDate.month + 1).toString().padStart(2, '0'), language)\n        case 'MMM':\n          return formatObj[language].month.short[bsDate.month]\n        case 'MMMM':\n          return formatObj[language].month.long[bsDate.month]\n        case 'YY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-2), language)\n        case 'YYY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-3), language)\n        case 'YYYY':\n          return mapLanguageNumber(bsDate.year.toString(), language)\n        case 'd':\n          return mapLanguageNumber(bsDate.day?.toString() || '0', language)\n        case 'dd':\n          return formatObj[language].day.short[bsDate.day || 0]\n        case 'ddd':\n          return formatObj[language].day.long[bsDate.day || 0]\n        default:\n          return matchedString.replace('/', '')\n      }\n    })\n    .replace(/\\\\/g, '')\n}\n\nexport function parse(dateString: string): IYearMonthDate {\n  const OFFICIAL_FORMAT = /(\\d{4})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})/\n  const GEORGIAN_FORMAT = /(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{4})/\n  let match: RegExpMatchArray | null\n  match = dateString.match(OFFICIAL_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[1], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[5], 10)\n    }\n  }\n  match = dateString.match(GEORGIAN_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[5], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[1], 10)\n    }\n  }\n  throw new Error('Invalid date format')\n}\n", "import {\n  convertToAD,\n  convertToBS,\n  IYearMonthDate,\n  IAdBs,\n  format,\n  Language,\n  parse\n} from './nepali-date-helper'\n\nconst dateSymbol = Symbol('Date')\nconst daySymbol = Symbol('Day')\nconst yearSymbol = Symbol('Year')\nconst monthSymbol = Symbol('MonthIndex')\nconst jsDateSymbol = Symbol('JsDate')\nconst convertToBSMethod = Symbol('convertToBS()')\nconst convertToADMethod = Symbol('convertToAD()')\nconst setAdBs = Symbol('setADBS()')\nconst setDayYearMonth = Symbol('setDayYearMonth()')\nexport default class NepaliDate {\n  private [jsDateSymbol]: Date\n  private [yearSymbol]: number\n  private [dateSymbol]: number\n  private [daySymbol]: number\n  private [monthSymbol]: number\n  /**\n   * Default language for formatting. Set the value to 'np' for default nepali formatting.\n   */\n  static language: 'np' | 'en' = Language.en\n  /**\n   * **String**\n   *\n   * Provide a valid Nepali date string. The current supported formats are:\n   *\n   * ```\n   * YYYY/MM/DD\n   * YYYY-MM-DD\n   * YYYY MM DD\n   * DD/MM/YYYY\n   * DD-MM-YYYY\n   * DD MM YYYY\n   * ```\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate('2051/02/01') // YYYY/MM/DD\n   * new NepaliDate('2051-02-01')\n   * new NepaliDate('2051 02 01')\n   * new NepaliDate('01/02/2051') // DD/MM/YYYY\n   * new NepaliDate('01-02-2051')\n   * new NepaliDate('01 02 2051')\n   * ```\n   *\n   * **Number**\n   *\n   * The number value represents the UTC timestamp that will be converted to Nepali date.\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(1589638162879)\n   * ```\n   *\n   * **Date**\n   *\n   * Javascript Date object\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(new Date(2020, 10, 10))\n   * ```\n   *\n   * **Empty constructor**\n   *\n   * If no values are provided, the current day date will be converted to Nepali date.\n   *\n   * ```js\n   * new NepaliDate()\n   * ```\n   * @param value\n   */\n  constructor(value?: string | number | Date)\n  /**\n   * This constructor takes year, monthIndex i.e 0-11, and date.\n   *\n   * Example:\n   *\n   * ```js\n   * new Date(2051, 0, 1) // Baisakh 1, 2051\n   * ```\n   * @param year\n   * @param monthIndex\n   * @param date\n   */\n  constructor(year: number, monthIndex: number, date: number)\n  constructor() {\n    const constructorError = new Error('Invalid constructor arguments')\n    if (arguments.length === 0) {\n      this[convertToBSMethod](new Date())\n    } else if (arguments.length === 1) {\n      const argument = arguments[0]\n      switch (typeof argument) {\n        case 'number':\n          this[convertToBSMethod](new Date(argument))\n          break\n        case 'string':\n          const { date, year, month } = parse(argument)\n          this[setDayYearMonth](year, month, date)\n          this[convertToADMethod]()\n          break\n        case 'object':\n          if (argument instanceof Date) {\n            this[convertToBSMethod](argument)\n          } else {\n            throw constructorError\n          }\n          break\n        default:\n          throw constructorError\n      }\n    } else if (arguments.length <= 3) {\n      this[setDayYearMonth](arguments[0], arguments[1], arguments[2])\n      this[convertToADMethod]()\n    } else {\n      throw constructorError\n    }\n  }\n\n  private [setDayYearMonth](year: number, month: number = 0, date: number = 1, day: number = 0) {\n    this[yearSymbol] = year\n    this[monthSymbol] = month\n    this[dateSymbol] = date\n    this[daySymbol] = day\n  }\n\n  /**\n   * Returns Javascript Date converted from nepali date.\n   */\n  toJsDate(): Date {\n    return this[jsDateSymbol]\n  }\n  /**\n   * Get Nepali date for the month\n   */\n  getDate(): number {\n    return this[dateSymbol]\n  }\n  /**\n   * Get Nepali date year.\n   */\n  getYear(): number {\n    return this[yearSymbol]\n  }\n\n  /**\n   * Get Week day index for the date.\n   */\n  getDay(): number {\n    return this[daySymbol]\n  }\n\n  /**\n   * Get Nepali month index.\n   *\n   * ```\n   * Baisakh => 0\n   * Jestha => 1\n   * Asar => 2\n   * Shrawan => 3\n   * Bhadra => 4\n   * Aswin => 5\n   * Kartik => 6\n   * Mangsir => 7\n   * Poush => 8\n   * Magh => 9\n   * Falgun => 10\n   * Chaitra => 11\n   * ```\n   */\n  getMonth(): number {\n    return this[monthSymbol]\n  }\n\n  /**\n   * Returns an object with AD and BS object implementing IYearMonthDate\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *     BS: {\n   *         year: 2052,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *     AD: {\n   *         year: 2019,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *\n   * }\n   * ```\n   */\n  getDateObject(): IAdBs {\n    return {\n      BS: this.getBS(),\n      AD: this.getAD()\n    }\n  }\n  /**\n   * Returns Nepali date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2052,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getBS(): IYearMonthDate {\n    return {\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol],\n      day: this[daySymbol]\n    }\n  }\n  /**\n   * Returns AD date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2019,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getAD(): IYearMonthDate {\n    return {\n      year: this[jsDateSymbol].getFullYear(),\n      month: this[jsDateSymbol].getMonth(),\n      date: this[jsDateSymbol].getDate(),\n      day: this[jsDateSymbol].getDay()\n    }\n  }\n\n  /**\n   * Set date in the current date object. It can be positive or negative. Positive values within the month\n   * will update the date only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setDate(11); // will make date NepaliDate(2054,10,11);\n   * a.setDate(-1); // will make date NepaliDate(2054,9,29);\n   * a.setDate(45); // will make date NepaliDate(2054,10,15);\n   * ```\n   * @param date positive or negative integer value to set date\n   */\n  setDate(date: number) {\n    const oldDate = this[dateSymbol]\n    try {\n      this[dateSymbol] = date\n      this[convertToADMethod]()\n    } catch (e) {\n      this[dateSymbol] = oldDate\n      throw e\n    }\n  }\n\n  /**\n   * Set month in the current date object. It can be positive or negative. Positive values within the month\n   * will update the month only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setMonth(1); // will make date NepaliDate(2054,11,10);\n   * a.setMonth(-1); // will make date NepaliDate(2053,11,10);\n   * a.setMonth(12); // will make date NepaliDate(2054,0,10);\n   * ```\n   * @param date positive or negative integer value to set month\n   */\n  setMonth(month: number) {\n    const oldMonth = this[monthSymbol]\n    try {\n      this[monthSymbol] = month\n      this[convertToADMethod]()\n    } catch (e) {\n      this[monthSymbol] = oldMonth\n      throw e\n    }\n  }\n\n  /**\n   * Set year in the current date object. It only takes positive value i.e Nepali Year\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setYear(2053); // will make date NepaliDate(2053,10,15);\n   * ```\n   * @param date positive integer value to set year\n   */\n  setYear(year: number) {\n    const oldYear = this[yearSymbol]\n    try {\n      this[yearSymbol] = year\n      this[convertToADMethod]()\n    } catch (e) {\n      this[yearSymbol] = oldYear\n      throw e\n    }\n  }\n\n  /**\n   * Format Nepali date string based on format string.\n   * ```\n   * YYYY - 4 digit of year (2077)\n   * YYY  - 3 digit of year (077)\n   * YY   - 2 digit of year (77)\n   * M    - month number (1 - 12)\n   * MM   - month number with 0 padding (01 - 12)\n   * MMM  - short month name (Bai, Jes, Asa, Shr, etc.)\n   * MMMM - full month name (Baisakh, Jestha, Asar, ...)\n   * D    - Day of Month (1, 2, ... 31, 32)\n   * DD   - Day of Month with zero padding (01, 02, ...)\n   * d    - Week day (0, 1, 2, 3, 4, 5, 6)\n   * dd   - Week day in short format (Sun, Mon, ..)\n   * ddd  - Week day in long format (Sunday, Monday, ...)\n   * ```\n   * Set language to 'np' for nepali format. The strings can be combined in any way to create desired format.\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.format('YYYY/MM/DD') // '2054/11/10'\n   * a.format('YYYY MM DD') // '2054 11 10'\n   * a.format('YYYY') // '2054'\n   * a.format('ddd DD, MMMM YYYY') // 'Sunday 10, Falgun 2054'\n   * a.format('To\\\\day is ddd DD, MMMM YYYY') // 'Today is Sunday 10, Falgun 2054', Note: use '\\\\' to escape [YMDd]\n   * a.format('DD/MM/YYYY', 'np') //' १०/११/२०५४'\n   * a.format('dd', 'np') // 'आइतबार'\n   * a.format('ddd DD, MMMM YYYY','np') // 'आइतबार १०, फाल्गुण २०५४'\n   * // Set static variable to 'np' for default Nepali language\n   * NepaliDate.language = 'np'\n   * a.format('ddd DD, MMMM YYYY') // 'आइतबार १०, फाल्गुण २०५४'\n   * ```\n   * @param formatString\n   * @param language en | np\n   */\n  format(formatString: string, language: 'en' | 'np' = NepaliDate.language): string {\n    return format(this.getBS(), formatString, language)\n  }\n\n  /**\n   * Returns new Nepali Date from the string date format\n   * Similar to calling constructor with string parameter\n   * @param dateString\n   */\n  static parse(dateString: string): NepaliDate {\n    const { date, year, month } = parse(dateString)\n    return new NepaliDate(year, month, date)\n  }\n\n  /**\n   * Returns new Nepali Date converted form current day date.\n   * Similar to calling empty constructor\n   */\n  static now(): NepaliDate {\n    return new NepaliDate()\n  }\n\n  /**\n   * Returns new converted Nepali Date from the provided Javascript Date.\n   * It is similar to passing string as constructor\n   * @param date\n   */\n  static fromAD(date: Date): NepaliDate {\n    return new NepaliDate(date)\n  }\n\n  private [convertToBSMethod](date: Date) {\n    const { AD, BS } = convertToBS(date)\n    this[setAdBs](AD, BS)\n  }\n\n  private [setAdBs](AD: IYearMonthDate, BS: IYearMonthDate) {\n    this[setDayYearMonth](BS.year, BS.month, BS.date, BS.day)\n    this[jsDateSymbol] = new Date(AD.year, AD.month, AD.date)\n  }\n\n  private [convertToADMethod]() {\n    const { AD, BS } = convertToAD({\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol]\n    })\n    this[setAdBs](AD, BS)\n  }\n\n  valueOf() {\n    return this[jsDateSymbol].getTime()\n  }\n\n  toString() {\n    return this.format('ddd DD, MMMM YYYY')\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA,IAAY;CAAZ,SAAYA,WAAQ;AAClB,EAAAA,UAAA,IAAA,IAAA;AACA,EAAAA,UAAA,IAAA,IAAA;AACF,GAHY,aAAA,WAGX,CAAA,EAAA;AAgBD,IAAM,uBAAmC;EACvC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;EAC/C,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,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",
  "names": ["Language", "daysPassed", "NepaliDate"]
}
